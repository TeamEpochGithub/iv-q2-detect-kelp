[build-system]
requires = ["setuptools", "wheel"]
build-backend = "setuptools.build_meta"

[tool.setuptools]
py-modules = ["dashboard", "external", "src", "cv", "run_dashboard", "submit", "train"]

[project]
name = "detect_kelp"
version = "0.0.1"
authors = [
    { name = "Emiel Witting", email = "emiel.witting@gmail.com" },
    { name = "Hugo de Heer", email = "hugodeheer1234@gmail.com" },
    { name = "Jasper van Selm", email = "jmvanselm@gmail.com" },
    { name = "Jeffrey Lim", email = "jeffrey-lim@outlook.com" },
    { name = "Tolga Kopar", email = "cahittolgakopar@gmail.com" },
]
description = "Team Epoch's solution to the \"Kelp Wanted: Segmenting Kelp Forests\" competition."
license = { file = "LICENSE" }
readme = "README.md"
requires-python = ">=3.11"

[tool.mypy]
exclude = ["external/", "venv/"]
allow_untyped_calls = true
disable_error_code = ["import-untyped"]

[tool.ruff]
extend-exclude = ["external/*"]
line-length = 175
target-version = "py311"
fix = true
select = [
    "ALL",  # Every check supported by Ruff
]
ignore = [
    # pydocstyle (D)
    "D203",  # 1 blank line required before class docstring
    "D213",  # Multi-line docstring summary should start at the second line
    # flake8-django (DJ)
    "DJ",  # Django is not used
     # eradicate (ERA)
    "ERA001",  # Found commented-out code
    # Pylint (PL)
    "PLR2004",  # Magic value used in comparison, consider replacing with a constant variable
    # flake8-builtins (A)
    "A001",  # Variable name is shadowing Python built-in
    # flake8-unused-arguments (ARG)
    "ARG001",  # Unused function argument
    "ARG002", # Unused method argument
    "ARG003", # Unused class method argument
    # flake8-annotations (ANN)
    "ANN101",  # Missing type annotation for self in method
    # flake8-commas (COM)
    "COM812",  # Trailing comma missing
    # flake8-errmsg (EM)
    "EM101",  # Exception must not use a string literal, assign to variable first
    "EM102",  # Exception must not use an f-string literal, assign to variable first
    # flake8-future-annotations (FA)
    "FA",  # Missing from __future__ import annotations
    # flake8-fixme (FIX)
    "FIX001",  # Line contains FIXME
    "FIX002",  # Line contains TODO
    "FIX003",  # Line contains XXX
    "FIX004",  # Line contains HACK
    # pep8-naming (N)
    "N803",  # Argument name should be lowercase
    "N806",  # Variable in function should be lowercase
    # flake8-use-pathlib (PTH)
    "PTH",  # Use pathlib instead of os.path. Dask does not seem to like pathlib.
    # flake8-quotes (Q)
    "Q000",  # Single quotes found but double quotes preferred
    # flake8-simplify (SIM)
    "SIM108",  # Use ternary operator instead of `if`-`else`-block
    # flake8-type-checking (TCH)
    "TCH001",  # Move application import into a type-checking block. Breaks Sphinx autodoc (https://github.com/sphinx-doc/sphinx/issues/11225).
    "TCH002",  # Move third-party import into a type-checking block. Breaks Sphinx autodoc (https://github.com/sphinx-doc/sphinx/issues/11225).
    "TCH003",  # Move standard library import into a type-checking block. Breaks Sphinx autodoc (https://github.com/sphinx-doc/sphinx/issues/11225).
    # flake8-todos (TD)
    "TD003",  # Missing issue link on the line following this TODO
    # tryceratops (TRY)
    "TRY003",  # Avoid specifying long messages outside the exception class
]

[tool.ruff.format]
docstring-code-format = true
