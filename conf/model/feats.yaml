defaults:
  - pipeline/default@_here_
  - _self_

feature_pipeline:
  processed_path: data/processed
  transformation_pipeline:
  column_pipeline:
    columns:

      # NDVI
      - _target_: src.pipeline.model.feature.column.column_block.ColumnBlockPipeline
        column_block:
          _target_: src.pipeline.model.feature.column.norm_diff.NormDiff
          a: 1 # NIR
          b: 2 # Red
        cache_block:
          _target_: src.pipeline.caching.column.CacheColumnBlock
          data_path: data/processed/cache
          column: -1

      # NDWI
      - _target_: src.pipeline.model.feature.column.column_block.ColumnBlockPipeline
        column_block:
          _target_: src.pipeline.model.feature.column.norm_diff.NormDiff
          a: 3 # Green
          b: 1 # NIR
        cache_block:
          _target_: src.pipeline.caching.column.CacheColumnBlock
          data_path: data/processed/cache
          column: -1

      # ONIR
      - _target_: src.pipeline.model.feature.column.column_block.ColumnBlockPipeline
        column_block:
          _target_: src.pipeline.model.feature.column.offset.Offset
          band: 1 # NIR
        cache_block:
          _target_: src.pipeline.caching.column.CacheColumnBlock
          data_path: data/processed/cache
          column: -1

      # ODVI
      - _target_: src.pipeline.model.feature.column.column_block.ColumnBlockPipeline
        column_block:
          _target_: src.pipeline.model.feature.column.offset_diff.OffsetDiff
          a: 1 # NIR
          b: 2 # Red
        cache_block:
          _target_: src.pipeline.caching.column.CacheColumnBlock
          data_path: data/processed/cache
          column: -1

      # MNDWI
      - _target_: src.pipeline.model.feature.column.column_block.ColumnBlockPipeline
        column_block:
          _target_: src.pipeline.model.feature.column.norm_diff.NormDiff
          a: 3 # Green
          b: 0 # SWIR
        cache_block:
          _target_: src.pipeline.caching.column.CacheColumnBlock
          data_path: data/processed/cache
          column: -1

      # Land Closeness
      - _target_: src.pipeline.model.feature.column.column_block.ColumnBlockPipeline
        column_block:
          _target_: src.pipeline.model.feature.column.shore.Shore
          mode: closeness
        cache_block:
          _target_: src.pipeline.caching.column.CacheColumnBlock
          data_path: data/processed/cache
          column: -1

target_pipeline:


model_loop_pipeline:
  pretrain_pipeline:
    pretrain_steps:
      - _target_: src.pipeline.model.model_loop.pretrain.column_selection.ColumnSelection
        columns: [4, 3, 2, 1, 0, 5, 6, 7, 8, 11, 12]
      - _target_: src.pipeline.model.model_loop.pretrain.scaler_block.ScalerBlock
        scaler:
          _target_: dask_ml.preprocessing.StandardScaler

  model_blocks_pipeline:
    model_blocks:

      # Pytorch model
      - _target_: src.pipeline.model.model_loop.model_blocks.torch_block.TorchBlock
        model:
          _target_: src.pipeline.model.architectures.smp_model.SMPModel
          padding: 1
          pretrained_weights:
            _target_: hydra.utils.get_object
            path: "torchgeo.models.ResNet50_Weights.LANDSAT_TM_TOA_MOCO"
          model: # from segmentation_models_pytorch import Unet
            _target_: segmentation_models_pytorch.Unet
            encoder_name: resnet50
            in_channels: 11
            classes: 1
            activation: sigmoid
          default_in_channels: 7
          new_in_channels: 11

        epochs: 10
        batch_size: 32
        patience: 20

        # Optimizer
        optimizer:
          _target_: functools.partial
          _args_:
            - _target_: hydra.utils.get_class
              path: torch.optim.AdamW
          lr: 0.0002
          weight_decay: 1e-8

        # Scheduler
        scheduler:
          _target_: functools.partial
          _args_:
              - _target_: hydra.utils.get_class
                path: torch.optim.lr_scheduler.CosineAnnealingWarmRestarts
          T_0: 20

        criterion:
          _target_: src.modules.loss.dice_loss.DiceLoss

        # Augmentations
        transformations:
          _target_: src.augmentations.transformations.Transformations
          korn:
            _target_: kornia.augmentation.AugmentationSequential
            _args_:
              - _target_: kornia.augmentation.RandomHorizontalFlip
                p: 0.5
              - _target_: kornia.augmentation.RandomVerticalFlip
                p: 0.5
              - _target_: kornia.augmentation.RandomRotation
                degrees: 90
                p: 1
              - _target_: kornia.augmentation.RandomGaussianBlur
                kernel_size: [ 3, 3 ]
                p: 0.5
                sigma: [ 0.1, 2.0 ]
              - _target_: kornia.augmentation.RandomMosaic
                p: 0.5
                output_size: [350, 350]

post_processing_pipeline:
  post_processing_steps:
    - _target_: src.pipeline.model.post_processing.threshold.Threshold
    - _target_: src.pipeline.model.post_processing.visualize_preds_block.VisualizationBlock
      raw_data_path: data/raw/train_satellite
