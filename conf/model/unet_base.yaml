defaults:
  - pipeline/default@_here_
  - _self_

feature_pipeline:
  processed_path: data/processed
  transformation_pipeline:
  column_pipeline:
    columns:

      # NDVI
      - _target_: src.pipeline.model.feature.column.column_block.ColumnBlockPipeline
        column_block:
          _target_: src.pipeline.model.feature.column.norm_diff.NormDiff
          a: 1 # NIR
          b: 2 # Red
        cache_block:
          _target_: src.pipeline.caching.column.CacheColumnBlock
          data_path: data/processed/cache
          column: -1

      # NDWI
      - _target_: src.pipeline.model.feature.column.column_block.ColumnBlockPipeline
        column_block:
          _target_: src.pipeline.model.feature.column.norm_diff.NormDiff
          a: 3 # Green
          b: 1 # NIR
        cache_block:
          _target_: src.pipeline.caching.column.CacheColumnBlock
          data_path: data/processed/cache
          column: -1

      # ONIR
      - _target_: src.pipeline.model.feature.column.column_block.ColumnBlockPipeline
        column_block:
          _target_: src.pipeline.model.feature.column.offset.Offset
          band: 1 # NIR
        cache_block:
          _target_: src.pipeline.caching.column.CacheColumnBlock
          data_path: data/processed/cache
          column: -1

      # ODVI
      - _target_: src.pipeline.model.feature.column.column_block.ColumnBlockPipeline
        column_block:
          _target_: src.pipeline.model.feature.column.offset_diff.OffsetDiff
          a: 1 # NIR
          b: 2 # Red
        cache_block:
          _target_: src.pipeline.caching.column.CacheColumnBlock
          data_path: data/processed/cache
          column: -1

target_pipeline:
  processed_path: data/processed/target
  transformation_pipeline:
    transformations:
      - _target_: src.pipeline.model.feature.transformation.gaussian_blur.GaussianBlur
        sigma: 1
  column_pipeline:
    columns: []

model_loop_pipeline:
  pretrain_pipeline:
    pretrain_steps:
      - _target_: src.pipeline.model.model_loop.pretrain.gbdt.GBDT
        max_images: 500
        early_stopping_split: 0.2
      - _target_: src.pipeline.model.model_loop.pretrain.column_selection.ColumnSelection
        columns: [1, 7, 8, 9, 10, 11]
      - _target_: src.pipeline.model.model_loop.pretrain.scaler_block.ScalerBlock
        scaler:
          _target_: dask_ml.preprocessing.StandardScaler

  model_blocks_pipeline:
    model_blocks:
      # Pytorch model
      - _target_: src.pipeline.model.model_loop.model_blocks.torch_block.TorchBlock
        model:
          _target_: src.pipeline.model.architectures.padded_model.PaddedModel
          padding: 1
          model: # from segmentation_models_pytorch import Unet
            _target_: segmentation_models_pytorch.Unet
            encoder_name: vgg11
            in_channels: 6
            classes: 1
            activation: sigmoid
        optimizer: # Partially instantiate optimizer, so model parameters can be linked at runtime
          _target_: functools.partial
          _args_:
            - _target_: hydra.utils.get_class
              path: torch.optim.AdamW
          lr: 0.00005
        scheduler:
        criterion:
          _target_: src.modules.loss.dice_loss.DiceLoss
        epochs: 100
        batch_size: 16
        patience: 15
        transformations:
          _target_: src.augmentations.transformations.Transformations
          korn:
            _target_: kornia.augmentation.AugmentationSequential
            _args_:
              - _target_: kornia.augmentation.RandomHorizontalFlip
                p: 0.5
              - _target_: kornia.augmentation.RandomVerticalFlip
                p: 0.5
              - _target_: kornia.augmentation.RandomRotation
                degrees: 90
                p: 0.5
              - _target_: kornia.augmentation.RandomGaussianBlur
                kernel_size: [3, 3]
                p: 0.5
                sigma: [0.1, 2.0]
              - _target_: kornia.augmentation.RandomMosaic
                p: 0.5
                output_size: [350,350]

post_processing_pipeline:
  post_processing_steps:
    - _target_: src.pipeline.model.post_processing.threshold.Threshold
